// Cully Report Management System Database Schema
//
// 1. Core Tables
//   - User: System users with RBAC
//   - Report: SAT reports with full lifecycle tracking
//   - ReportStep: Individual wizard step data
//   - Signature: Digital signatures for approvals
//   - Comment: Comment threads for collaboration
//   - AuditLog: Complete audit trail
//   - File: File attachments and uploads
//
// 2. Security
//   - Row Level Security enforced at query level
//   - RBAC with strict role-based access
//   - Audit logging for all critical operations
//
// 3. Workflow
//   - State machine for report approval workflow
//   - Digital signatures with full traceability
//   - Automated notifications and status updates

generator client {
  provider = "prisma-client-js"
   output   = "../server/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ENGINEER
  TECHNICAL_MANAGER
  PROJECT_MANAGER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum ReportStatus {
  DRAFT
  PENDING_TM_APPROVAL
  PENDING_PM_APPROVAL
  REJECTED
  COMPLETED
}

enum ReportType {
  SAT
  FDS
  HDS
}

enum SeverityLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum PunchItemStatus {
  OPEN
  CLOSED
}

enum TestResult {
  PASS
  FAIL
  NA
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  fullName  String
  role      UserRole
  status    UserStatus @default(PENDING)
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  createdReports     Report[]    @relation("ReportCreator")
  tmAssignedReports  Report[]    @relation("TechnicalManager")
  pmAssignedReports  Report[]    @relation("ProjectManager")
  signatures         Signature[]
  comments           Comment[]
  auditLogs          AuditLog[]
  lastLogin          DateTime?

  @@map("users")
}

model Report {
  id               String       @id @default(cuid())
  title            String
  projectRef       String
  documentRef      String
  revision         String
  type             ReportType   @default(SAT)
  status           ReportStatus @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  submittedAt      DateTime?
  completedAt      DateTime?
  finalStoragePath String?

  // Foreign Keys
  creatorId String
  tmId      String?
  pmId      String?

  // Relations
  creator          User           @relation("ReportCreator", fields: [creatorId], references: [id])
  technicalManager User?          @relation("TechnicalManager", fields: [tmId], references: [id])
  projectManager   User?          @relation("ProjectManager", fields: [pmId], references: [id])

  steps      ReportStep[]
  signatures Signature[]
  comments   Comment[]
  files      File[]
  auditLogs  AuditLog[]

  @@unique([documentRef, revision])
  @@map("reports")
}

model ReportStep {
  id       String @id @default(cuid())
  reportId String
  stepName String
  data     Json

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, stepName])
  @@map("report_steps")
}

model Signature {
  id            String   @id @default(cuid())
  reportId      String
  userId        String
  role          UserRole
  signatureData String // Base64 encoded signature image
  ipAddress     String
  signedAt      DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("signatures")
}

model Comment {
  id        String   @id @default(cuid())
  reportId  String
  userId    String
  content   String
  mentions  String[] // Array of user IDs mentioned
  createdAt DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

model File {
  id           String   @id @default(cuid())
  reportId     String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  uploadedAt   DateTime @default(now())

  report Report? @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("files")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  reportId  String?
  action    String
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  report Report? @relation(fields: [reportId], references: [id])

  @@map("audit_logs")
}

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("system_settings")
}